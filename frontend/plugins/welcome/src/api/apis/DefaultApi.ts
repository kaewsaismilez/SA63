/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntDentist,
    EntDentistFromJSON,
    EntDentistToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntMedicalfile,
    EntMedicalfileFromJSON,
    EntMedicalfileToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
} from '../models';

export interface CreateDentistRequest {
    dentist: EntDentist;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreateMedicalfileRequest {
    medicalfile: EntMedicalfile;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface GetDentistRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetMedicalfileRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface ListDentistRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalfileRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Dentist
     * Create Dentist
     */
    async createDentistRaw(requestParameters: CreateDentistRequest): Promise<runtime.ApiResponse<EntDentist>> {
        if (requestParameters.dentist === null || requestParameters.dentist === undefined) {
            throw new runtime.RequiredError('dentist','Required parameter requestParameters.dentist was null or undefined when calling createDentist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dentists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDentistToJSON(requestParameters.dentist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDentistFromJSON(jsonValue));
    }

    /**
     * Create Dentist
     * Create Dentist
     */
    async createDentist(requestParameters: CreateDentistRequest): Promise<EntDentist> {
        const response = await this.createDentistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Employee
     * Create Employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create Employee
     * Create Employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicalfile
     * Create medicalfile
     */
    async createMedicalfileRaw(requestParameters: CreateMedicalfileRequest): Promise<runtime.ApiResponse<EntMedicalfile>> {
        if (requestParameters.medicalfile === null || requestParameters.medicalfile === undefined) {
            throw new runtime.RequiredError('medicalfile','Required parameter requestParameters.medicalfile was null or undefined when calling createMedicalfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalfiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalfileToJSON(requestParameters.medicalfile),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalfileFromJSON(jsonValue));
    }

    /**
     * Create medicalfile
     * Create medicalfile
     */
    async createMedicalfile(requestParameters: CreateMedicalfileRequest): Promise<EntMedicalfile> {
        const response = await this.createMedicalfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Patient
     * Create Patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create Patient
     * Create Patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Dentist by ID
     * Get a Dentist entity by ID
     */
    async getDentistRaw(requestParameters: GetDentistRequest): Promise<runtime.ApiResponse<EntDentist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDentist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dentists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDentistFromJSON(jsonValue));
    }

    /**
     * get Dentist by ID
     * Get a Dentist entity by ID
     */
    async getDentist(requestParameters: GetDentistRequest): Promise<EntDentist> {
        const response = await this.getDentistRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Employee by ID
     * Get a Employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get Employee by ID
     * Get a Employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Medicalfile by ID
     * Get a Medicalfile entity by ID
     */
    async getMedicalfileRaw(requestParameters: GetMedicalfileRequest): Promise<runtime.ApiResponse<EntMedicalfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicalfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalfiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalfileFromJSON(jsonValue));
    }

    /**
     * get Medicalfile by ID
     * Get a Medicalfile entity by ID
     */
    async getMedicalfile(requestParameters: GetMedicalfileRequest): Promise<EntMedicalfile> {
        const response = await this.getMedicalfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Patient by ID
     * Get a Patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get Patient by ID
     * Get a Patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Dentist entities
     * List Dentist entities
     */
    async listDentistRaw(requestParameters: ListDentistRequest): Promise<runtime.ApiResponse<Array<EntDentist>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dentists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDentistFromJSON));
    }

    /**
     * list Dentist entities
     * List Dentist entities
     */
    async listDentist(requestParameters: ListDentistRequest): Promise<Array<EntDentist>> {
        const response = await this.listDentistRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Employee entities
     * List Employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list Employee entities
     * List Employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Medicalfile entities
     * List Medicalfile entities
     */
    async listMedicalfileRaw(requestParameters: ListMedicalfileRequest): Promise<runtime.ApiResponse<Array<EntMedicalfile>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalfiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalfileFromJSON));
    }

    /**
     * list Medicalfile entities
     * List Medicalfile entities
     */
    async listMedicalfile(requestParameters: ListMedicalfileRequest): Promise<Array<EntMedicalfile>> {
        const response = await this.listMedicalfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Patient entities
     * List Patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list Patient entities
     * List Patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

}
