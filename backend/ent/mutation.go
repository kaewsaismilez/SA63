// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/kaews/app/ent/dentist"
	"github.com/kaews/app/ent/employee"
	"github.com/kaews/app/ent/medicalfile"
	"github.com/kaews/app/ent/patient"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDentist     = "Dentist"
	TypeEmployee    = "Employee"
	TypeMedicalfile = "Medicalfile"
	TypePatient     = "Patient"
)

// DentistMutation represents an operation that mutate the Dentists
// nodes in the graph.
type DentistMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	clearedFields       map[string]struct{}
	medicalfiles        map[int]struct{}
	removedmedicalfiles map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Dentist, error)
}

var _ ent.Mutation = (*DentistMutation)(nil)

// dentistOption allows to manage the mutation configuration using functional options.
type dentistOption func(*DentistMutation)

// newDentistMutation creates new mutation for $n.Name.
func newDentistMutation(c config, op Op, opts ...dentistOption) *DentistMutation {
	m := &DentistMutation{
		config:        c,
		op:            op,
		typ:           TypeDentist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDentistID sets the id field of the mutation.
func withDentistID(id int) dentistOption {
	return func(m *DentistMutation) {
		var (
			err   error
			once  sync.Once
			value *Dentist
		)
		m.oldValue = func(ctx context.Context) (*Dentist, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dentist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDentist sets the old Dentist of the mutation.
func withDentist(node *Dentist) dentistOption {
	return func(m *DentistMutation) {
		m.oldValue = func(context.Context) (*Dentist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DentistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DentistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DentistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DentistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DentistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DentistMutation) ResetName() {
	m.name = nil
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (m *DentistMutation) AddMedicalfileIDs(ids ...int) {
	if m.medicalfiles == nil {
		m.medicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.medicalfiles[ids[i]] = struct{}{}
	}
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (m *DentistMutation) RemoveMedicalfileIDs(ids ...int) {
	if m.removedmedicalfiles == nil {
		m.removedmedicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicalfiles[ids[i]] = struct{}{}
	}
}

// RemovedMedicalfiles returns the removed ids of medicalfiles.
func (m *DentistMutation) RemovedMedicalfilesIDs() (ids []int) {
	for id := range m.removedmedicalfiles {
		ids = append(ids, id)
	}
	return
}

// MedicalfilesIDs returns the medicalfiles ids in the mutation.
func (m *DentistMutation) MedicalfilesIDs() (ids []int) {
	for id := range m.medicalfiles {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalfiles reset all changes of the "medicalfiles" edge.
func (m *DentistMutation) ResetMedicalfiles() {
	m.medicalfiles = nil
	m.removedmedicalfiles = nil
}

// Op returns the operation name.
func (m *DentistMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dentist).
func (m *DentistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DentistMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, dentist.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DentistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dentist.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DentistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dentist.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Dentist field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DentistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dentist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Dentist field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DentistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DentistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DentistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dentist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DentistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DentistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DentistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dentist nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DentistMutation) ResetField(name string) error {
	switch name {
	case dentist.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Dentist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DentistMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.medicalfiles != nil {
		edges = append(edges, dentist.EdgeMedicalfiles)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DentistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dentist.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.medicalfiles))
		for id := range m.medicalfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DentistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmedicalfiles != nil {
		edges = append(edges, dentist.EdgeMedicalfiles)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DentistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dentist.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.removedmedicalfiles))
		for id := range m.removedmedicalfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DentistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DentistMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DentistMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dentist unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DentistMutation) ResetEdge(name string) error {
	switch name {
	case dentist.EdgeMedicalfiles:
		m.ResetMedicalfiles()
		return nil
	}
	return fmt.Errorf("unknown Dentist edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	email               *string
	password            *string
	clearedFields       map[string]struct{}
	medicalfiles        map[int]struct{}
	removedmedicalfiles map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *EmployeeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *EmployeeMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *EmployeeMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *EmployeeMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *EmployeeMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *EmployeeMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *EmployeeMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *EmployeeMutation) ResetPassword() {
	m.password = nil
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (m *EmployeeMutation) AddMedicalfileIDs(ids ...int) {
	if m.medicalfiles == nil {
		m.medicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.medicalfiles[ids[i]] = struct{}{}
	}
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (m *EmployeeMutation) RemoveMedicalfileIDs(ids ...int) {
	if m.removedmedicalfiles == nil {
		m.removedmedicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicalfiles[ids[i]] = struct{}{}
	}
}

// RemovedMedicalfiles returns the removed ids of medicalfiles.
func (m *EmployeeMutation) RemovedMedicalfilesIDs() (ids []int) {
	for id := range m.removedmedicalfiles {
		ids = append(ids, id)
	}
	return
}

// MedicalfilesIDs returns the medicalfiles ids in the mutation.
func (m *EmployeeMutation) MedicalfilesIDs() (ids []int) {
	for id := range m.medicalfiles {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalfiles reset all changes of the "medicalfiles" edge.
func (m *EmployeeMutation) ResetMedicalfiles() {
	m.medicalfiles = nil
	m.removedmedicalfiles = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m.email != nil {
		fields = append(fields, employee.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, employee.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldName:
		return m.Name()
	case employee.FieldEmail:
		return m.Email()
	case employee.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldEmail:
		return m.OldEmail(ctx)
	case employee.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case employee.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldEmail:
		m.ResetEmail()
		return nil
	case employee.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.medicalfiles != nil {
		edges = append(edges, employee.EdgeMedicalfiles)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.medicalfiles))
		for id := range m.medicalfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmedicalfiles != nil {
		edges = append(edges, employee.EdgeMedicalfiles)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.removedmedicalfiles))
		for id := range m.removedmedicalfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgeMedicalfiles:
		m.ResetMedicalfiles()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// MedicalfileMutation represents an operation that mutate the Medicalfiles
// nodes in the graph.
type MedicalfileMutation struct {
	config
	op              Op
	typ             string
	id              *int
	detail          *string
	added_time      *time.Time
	clearedFields   map[string]struct{}
	dentist         *int
	cleareddentist  bool
	patient         *int
	clearedpatient  bool
	employee        *int
	clearedemployee bool
	done            bool
	oldValue        func(context.Context) (*Medicalfile, error)
}

var _ ent.Mutation = (*MedicalfileMutation)(nil)

// medicalfileOption allows to manage the mutation configuration using functional options.
type medicalfileOption func(*MedicalfileMutation)

// newMedicalfileMutation creates new mutation for $n.Name.
func newMedicalfileMutation(c config, op Op, opts ...medicalfileOption) *MedicalfileMutation {
	m := &MedicalfileMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalfileID sets the id field of the mutation.
func withMedicalfileID(id int) medicalfileOption {
	return func(m *MedicalfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Medicalfile
		)
		m.oldValue = func(ctx context.Context) (*Medicalfile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medicalfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalfile sets the old Medicalfile of the mutation.
func withMedicalfile(node *Medicalfile) medicalfileOption {
	return func(m *MedicalfileMutation) {
		m.oldValue = func(context.Context) (*Medicalfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDetail sets the detail field.
func (m *MedicalfileMutation) SetDetail(s string) {
	m.detail = &s
}

// Detail returns the detail value in the mutation.
func (m *MedicalfileMutation) Detail() (r string, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old detail value of the Medicalfile.
// If the Medicalfile object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalfileMutation) OldDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ResetDetail reset all changes of the "detail" field.
func (m *MedicalfileMutation) ResetDetail() {
	m.detail = nil
}

// SetAddedTime sets the added_time field.
func (m *MedicalfileMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *MedicalfileMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the Medicalfile.
// If the Medicalfile object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalfileMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *MedicalfileMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetDentistID sets the dentist edge to Dentist by id.
func (m *MedicalfileMutation) SetDentistID(id int) {
	m.dentist = &id
}

// ClearDentist clears the dentist edge to Dentist.
func (m *MedicalfileMutation) ClearDentist() {
	m.cleareddentist = true
}

// DentistCleared returns if the edge dentist was cleared.
func (m *MedicalfileMutation) DentistCleared() bool {
	return m.cleareddentist
}

// DentistID returns the dentist id in the mutation.
func (m *MedicalfileMutation) DentistID() (id int, exists bool) {
	if m.dentist != nil {
		return *m.dentist, true
	}
	return
}

// DentistIDs returns the dentist ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DentistID instead. It exists only for internal usage by the builders.
func (m *MedicalfileMutation) DentistIDs() (ids []int) {
	if id := m.dentist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDentist reset all changes of the "dentist" edge.
func (m *MedicalfileMutation) ResetDentist() {
	m.dentist = nil
	m.cleareddentist = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *MedicalfileMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *MedicalfileMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *MedicalfileMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *MedicalfileMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *MedicalfileMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *MedicalfileMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *MedicalfileMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *MedicalfileMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *MedicalfileMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *MedicalfileMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *MedicalfileMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *MedicalfileMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// Op returns the operation name.
func (m *MedicalfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Medicalfile).
func (m *MedicalfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalfileMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.detail != nil {
		fields = append(fields, medicalfile.FieldDetail)
	}
	if m.added_time != nil {
		fields = append(fields, medicalfile.FieldAddedTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicalfile.FieldDetail:
		return m.Detail()
	case medicalfile.FieldAddedTime:
		return m.AddedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicalfile.FieldDetail:
		return m.OldDetail(ctx)
	case medicalfile.FieldAddedTime:
		return m.OldAddedTime(ctx)
	}
	return nil, fmt.Errorf("unknown Medicalfile field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicalfile.FieldDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case medicalfile.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	}
	return fmt.Errorf("unknown Medicalfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicalfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Medicalfile nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalfileMutation) ResetField(name string) error {
	switch name {
	case medicalfile.FieldDetail:
		m.ResetDetail()
		return nil
	case medicalfile.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	}
	return fmt.Errorf("unknown Medicalfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.dentist != nil {
		edges = append(edges, medicalfile.EdgeDentist)
	}
	if m.patient != nil {
		edges = append(edges, medicalfile.EdgePatient)
	}
	if m.employee != nil {
		edges = append(edges, medicalfile.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicalfile.EdgeDentist:
		if id := m.dentist; id != nil {
			return []ent.Value{*id}
		}
	case medicalfile.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case medicalfile.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddentist {
		edges = append(edges, medicalfile.EdgeDentist)
	}
	if m.clearedpatient {
		edges = append(edges, medicalfile.EdgePatient)
	}
	if m.clearedemployee {
		edges = append(edges, medicalfile.EdgeEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalfileMutation) EdgeCleared(name string) bool {
	switch name {
	case medicalfile.EdgeDentist:
		return m.cleareddentist
	case medicalfile.EdgePatient:
		return m.clearedpatient
	case medicalfile.EdgeEmployee:
		return m.clearedemployee
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalfileMutation) ClearEdge(name string) error {
	switch name {
	case medicalfile.EdgeDentist:
		m.ClearDentist()
		return nil
	case medicalfile.EdgePatient:
		m.ClearPatient()
		return nil
	case medicalfile.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Medicalfile unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalfileMutation) ResetEdge(name string) error {
	switch name {
	case medicalfile.EdgeDentist:
		m.ResetDentist()
		return nil
	case medicalfile.EdgePatient:
		m.ResetPatient()
		return nil
	case medicalfile.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Medicalfile edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	age                 *int
	addage              *int
	clearedFields       map[string]struct{}
	medicalfiles        map[int]struct{}
	removedmedicalfiles map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetAge sets the age field.
func (m *PatientMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *PatientMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *PatientMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *PatientMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *PatientMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (m *PatientMutation) AddMedicalfileIDs(ids ...int) {
	if m.medicalfiles == nil {
		m.medicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.medicalfiles[ids[i]] = struct{}{}
	}
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (m *PatientMutation) RemoveMedicalfileIDs(ids ...int) {
	if m.removedmedicalfiles == nil {
		m.removedmedicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicalfiles[ids[i]] = struct{}{}
	}
}

// RemovedMedicalfiles returns the removed ids of medicalfiles.
func (m *PatientMutation) RemovedMedicalfilesIDs() (ids []int) {
	for id := range m.removedmedicalfiles {
		ids = append(ids, id)
	}
	return
}

// MedicalfilesIDs returns the medicalfiles ids in the mutation.
func (m *PatientMutation) MedicalfilesIDs() (ids []int) {
	for id := range m.medicalfiles {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalfiles reset all changes of the "medicalfiles" edge.
func (m *PatientMutation) ResetMedicalfiles() {
	m.medicalfiles = nil
	m.removedmedicalfiles = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.age != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldName:
		return m.Name()
	case patient.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.medicalfiles != nil {
		edges = append(edges, patient.EdgeMedicalfiles)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.medicalfiles))
		for id := range m.medicalfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmedicalfiles != nil {
		edges = append(edges, patient.EdgeMedicalfiles)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.removedmedicalfiles))
		for id := range m.removedmedicalfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeMedicalfiles:
		m.ResetMedicalfiles()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}
