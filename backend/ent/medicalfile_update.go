// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kaews/app/ent/dentist"
	"github.com/kaews/app/ent/employee"
	"github.com/kaews/app/ent/medicalfile"
	"github.com/kaews/app/ent/patient"
	"github.com/kaews/app/ent/predicate"
)

// MedicalfileUpdate is the builder for updating Medicalfile entities.
type MedicalfileUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicalfileMutation
	predicates []predicate.Medicalfile
}

// Where adds a new predicate for the builder.
func (mu *MedicalfileUpdate) Where(ps ...predicate.Medicalfile) *MedicalfileUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetDetail sets the detail field.
func (mu *MedicalfileUpdate) SetDetail(s string) *MedicalfileUpdate {
	mu.mutation.SetDetail(s)
	return mu
}

// SetAddedTime sets the added_time field.
func (mu *MedicalfileUpdate) SetAddedTime(t time.Time) *MedicalfileUpdate {
	mu.mutation.SetAddedTime(t)
	return mu
}

// SetDentistID sets the dentist edge to Dentist by id.
func (mu *MedicalfileUpdate) SetDentistID(id int) *MedicalfileUpdate {
	mu.mutation.SetDentistID(id)
	return mu
}

// SetNillableDentistID sets the dentist edge to Dentist by id if the given value is not nil.
func (mu *MedicalfileUpdate) SetNillableDentistID(id *int) *MedicalfileUpdate {
	if id != nil {
		mu = mu.SetDentistID(*id)
	}
	return mu
}

// SetDentist sets the dentist edge to Dentist.
func (mu *MedicalfileUpdate) SetDentist(d *Dentist) *MedicalfileUpdate {
	return mu.SetDentistID(d.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (mu *MedicalfileUpdate) SetPatientID(id int) *MedicalfileUpdate {
	mu.mutation.SetPatientID(id)
	return mu
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (mu *MedicalfileUpdate) SetNillablePatientID(id *int) *MedicalfileUpdate {
	if id != nil {
		mu = mu.SetPatientID(*id)
	}
	return mu
}

// SetPatient sets the patient edge to Patient.
func (mu *MedicalfileUpdate) SetPatient(p *Patient) *MedicalfileUpdate {
	return mu.SetPatientID(p.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (mu *MedicalfileUpdate) SetEmployeeID(id int) *MedicalfileUpdate {
	mu.mutation.SetEmployeeID(id)
	return mu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (mu *MedicalfileUpdate) SetNillableEmployeeID(id *int) *MedicalfileUpdate {
	if id != nil {
		mu = mu.SetEmployeeID(*id)
	}
	return mu
}

// SetEmployee sets the employee edge to Employee.
func (mu *MedicalfileUpdate) SetEmployee(e *Employee) *MedicalfileUpdate {
	return mu.SetEmployeeID(e.ID)
}

// Mutation returns the MedicalfileMutation object of the builder.
func (mu *MedicalfileUpdate) Mutation() *MedicalfileMutation {
	return mu.mutation
}

// ClearDentist clears the dentist edge to Dentist.
func (mu *MedicalfileUpdate) ClearDentist() *MedicalfileUpdate {
	mu.mutation.ClearDentist()
	return mu
}

// ClearPatient clears the patient edge to Patient.
func (mu *MedicalfileUpdate) ClearPatient() *MedicalfileUpdate {
	mu.mutation.ClearPatient()
	return mu
}

// ClearEmployee clears the employee edge to Employee.
func (mu *MedicalfileUpdate) ClearEmployee() *MedicalfileUpdate {
	mu.mutation.ClearEmployee()
	return mu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MedicalfileUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mu.mutation.Detail(); ok {
		if err := medicalfile.DetailValidator(v); err != nil {
			return 0, &ValidationError{Name: "detail", err: fmt.Errorf("ent: validator failed for field \"detail\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MedicalfileUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MedicalfileUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MedicalfileUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MedicalfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalfile.Table,
			Columns: medicalfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalfile.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalfile.FieldDetail,
		})
	}
	if value, ok := mu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: medicalfile.FieldAddedTime,
		})
	}
	if mu.mutation.DentistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.DentistTable,
			Columns: []string{medicalfile.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DentistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.DentistTable,
			Columns: []string{medicalfile.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.PatientTable,
			Columns: []string{medicalfile.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.PatientTable,
			Columns: []string{medicalfile.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.EmployeeTable,
			Columns: []string{medicalfile.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.EmployeeTable,
			Columns: []string{medicalfile.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalfile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalfileUpdateOne is the builder for updating a single Medicalfile entity.
type MedicalfileUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalfileMutation
}

// SetDetail sets the detail field.
func (muo *MedicalfileUpdateOne) SetDetail(s string) *MedicalfileUpdateOne {
	muo.mutation.SetDetail(s)
	return muo
}

// SetAddedTime sets the added_time field.
func (muo *MedicalfileUpdateOne) SetAddedTime(t time.Time) *MedicalfileUpdateOne {
	muo.mutation.SetAddedTime(t)
	return muo
}

// SetDentistID sets the dentist edge to Dentist by id.
func (muo *MedicalfileUpdateOne) SetDentistID(id int) *MedicalfileUpdateOne {
	muo.mutation.SetDentistID(id)
	return muo
}

// SetNillableDentistID sets the dentist edge to Dentist by id if the given value is not nil.
func (muo *MedicalfileUpdateOne) SetNillableDentistID(id *int) *MedicalfileUpdateOne {
	if id != nil {
		muo = muo.SetDentistID(*id)
	}
	return muo
}

// SetDentist sets the dentist edge to Dentist.
func (muo *MedicalfileUpdateOne) SetDentist(d *Dentist) *MedicalfileUpdateOne {
	return muo.SetDentistID(d.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (muo *MedicalfileUpdateOne) SetPatientID(id int) *MedicalfileUpdateOne {
	muo.mutation.SetPatientID(id)
	return muo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (muo *MedicalfileUpdateOne) SetNillablePatientID(id *int) *MedicalfileUpdateOne {
	if id != nil {
		muo = muo.SetPatientID(*id)
	}
	return muo
}

// SetPatient sets the patient edge to Patient.
func (muo *MedicalfileUpdateOne) SetPatient(p *Patient) *MedicalfileUpdateOne {
	return muo.SetPatientID(p.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (muo *MedicalfileUpdateOne) SetEmployeeID(id int) *MedicalfileUpdateOne {
	muo.mutation.SetEmployeeID(id)
	return muo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (muo *MedicalfileUpdateOne) SetNillableEmployeeID(id *int) *MedicalfileUpdateOne {
	if id != nil {
		muo = muo.SetEmployeeID(*id)
	}
	return muo
}

// SetEmployee sets the employee edge to Employee.
func (muo *MedicalfileUpdateOne) SetEmployee(e *Employee) *MedicalfileUpdateOne {
	return muo.SetEmployeeID(e.ID)
}

// Mutation returns the MedicalfileMutation object of the builder.
func (muo *MedicalfileUpdateOne) Mutation() *MedicalfileMutation {
	return muo.mutation
}

// ClearDentist clears the dentist edge to Dentist.
func (muo *MedicalfileUpdateOne) ClearDentist() *MedicalfileUpdateOne {
	muo.mutation.ClearDentist()
	return muo
}

// ClearPatient clears the patient edge to Patient.
func (muo *MedicalfileUpdateOne) ClearPatient() *MedicalfileUpdateOne {
	muo.mutation.ClearPatient()
	return muo
}

// ClearEmployee clears the employee edge to Employee.
func (muo *MedicalfileUpdateOne) ClearEmployee() *MedicalfileUpdateOne {
	muo.mutation.ClearEmployee()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MedicalfileUpdateOne) Save(ctx context.Context) (*Medicalfile, error) {
	if v, ok := muo.mutation.Detail(); ok {
		if err := medicalfile.DetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "detail", err: fmt.Errorf("ent: validator failed for field \"detail\": %w", err)}
		}
	}

	var (
		err  error
		node *Medicalfile
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MedicalfileUpdateOne) SaveX(ctx context.Context) *Medicalfile {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MedicalfileUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MedicalfileUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MedicalfileUpdateOne) sqlSave(ctx context.Context) (m *Medicalfile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalfile.Table,
			Columns: medicalfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalfile.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Medicalfile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalfile.FieldDetail,
		})
	}
	if value, ok := muo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: medicalfile.FieldAddedTime,
		})
	}
	if muo.mutation.DentistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.DentistTable,
			Columns: []string{medicalfile.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DentistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.DentistTable,
			Columns: []string{medicalfile.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.PatientTable,
			Columns: []string{medicalfile.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.PatientTable,
			Columns: []string{medicalfile.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.EmployeeTable,
			Columns: []string{medicalfile.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalfile.EmployeeTable,
			Columns: []string{medicalfile.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	m = &Medicalfile{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalfile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
